

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - ecommerce_network
    restart: unless-stopped

  backend:
    build: ./ecommerce-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGO_URI=mongodb://mongo:27017/ecommerceDB?replicaSet=rs0
      - SEED_DB=true
      - SEED_CLEAR_EXISTING=true
      - JWT_SECRET=your_very_secret_key_here
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - ecommerce_network
    restart: unless-stopped

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    command:
      - "mongod"
      - "--replSet"
      - "rs0"
      - "--bind_ip_all"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce_network
    restart: unless-stopped

  mongo-setup:
    image: mongo:6
    depends_on:
      mongo:
        condition: service_healthy
    entrypoint: [
      "bash", "-c",
      "until mongosh --host mongo --eval 'rs.initiate({_id:\"rs0\",members:[{_id:0,host:\"mongo:27017\"}]})'; do sleep 5; done"
    ]
    networks:
      - ecommerce_network
    restart: on-failure

volumes:
  mongodb_data:

networks:
  ecommerce_network:
    driver: bridge
